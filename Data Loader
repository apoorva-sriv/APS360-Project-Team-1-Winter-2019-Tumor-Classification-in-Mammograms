def get_relevant_indices(dataset, classes, target_classes):
    """ Return the indices for datapoints in the dataset that belongs to the
    desired target classes, a subset of all possible classes.

    Args:
        dataset: Dataset object
        classes: A list of strings denoting the name of each class
        target_classes: A list of strings denoting the name of desired classes
                        Should be a subset of the 'classes'
    Returns:
        indices: list of indices that have labels corresponding to one of the
                 target classes
    """
    indices = []
    for i in range(len(dataset)):
        # Check if the label is in the target classes
        label_index = dataset[i][1] # ex: 3
        label_class = classes[label_index] # ex: 'cat'
        if label_class in target_classes:
            indices.append(i)

    return indices
    
    def get_data_loader(target_classes, batch_size):
    """ Returns the indices for datapoints in the dataset that
    belongs to the desired target classes, a subset of all possible classes.

    Args:
        dataset: Dataset object
        classes: A list of strings denoting the name of each class
        target_classes: A list of strings denoting the name of the desired
                        classes. Should be a subset of the argument 'classes'
    Returns:
        indices: list of indices that have labels corresponding to one of the
                 target classes
    """
    classes = ('normal', 'abnormal')
    
# Data augmentation: resize image to 224
    transform = transforms.Compose(
        [transforms.Resize(224),
         transforms.ToTensor(),
         transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

    trainset = torchvision.datasets.ImageFolder(root='/content/gdrive/My Drive/data360/small_set_balanced_CC/train', transform=transform)    

    valset = torchvision.datasets.ImageFolder(root='/content/gdrive/My Drive/data360/small_set_balanced_CC/validation', transform=transform)
    
    testset = torchvision.datasets.ImageFolder(root='/content/gdrive/My Drive/data360/small_set_balanced_CC/test', transform=transform)
    
    
    relevant_train_indices = get_relevant_indices(
            trainset,
            classes,
            target_classes)
    
    relevant_val_indices = get_relevant_indices(
            valset,
            classes,
            target_classes)
    
    relevant_test_indices = get_relevant_indices(
            testset,
            classes,
            target_classes)
    
    
    train_sampler = SubsetRandomSampler(relevant_train_indices)
    
    train_loader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
                                              num_workers=1, sampler=train_sampler)

  #  val_sampler = SubsetRandomSampler(valset)
    
    val_sampler = SubsetRandomSampler(relevant_val_indices)
    
    val_loader = torch.utils.data.DataLoader(valset, batch_size=batch_size,
                                              num_workers=1, sampler=val_sampler)

    test_sampler = SubsetRandomSampler(relevant_test_indices)
    
    test_loader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                              num_workers=1, sampler=test_sampler)

    return train_loader, val_loader, test_loader, classes
    
    
    train_loader, val_loader, test_loader, classes = get_data_loader(
    target_classes=["normal", "abnormal"], 
    batch_size=32)
